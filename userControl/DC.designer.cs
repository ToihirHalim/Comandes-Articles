#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace userControl
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="maBase")]
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertComposition(Composition instance);
    partial void UpdateComposition(Composition instance);
    partial void DeleteComposition(Composition instance);
    partial void InsertCommande(Commande instance);
    partial void UpdateCommande(Commande instance);
    partial void DeleteCommande(Commande instance);
    #endregion
		
		public DCDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["maBaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Article
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Composition> Composition
		{
			get
			{
				return this.GetTable<Composition>();
			}
		}
		
		public System.Data.Linq.Table<Commande> Commande
		{
			get
			{
				return this.GetTable<Commande>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeArt;
		
		private string _Libele;
		
		private System.Nullable<double> _Pu;
		
		private EntitySet<Composition> _Composition;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeArtChanging(int value);
    partial void OnCodeArtChanged();
    partial void OnLibeleChanging(string value);
    partial void OnLibeleChanged();
    partial void OnPuChanging(System.Nullable<double> value);
    partial void OnPuChanged();
    #endregion
		
		public Article()
		{
			this._Composition = new EntitySet<Composition>(new Action<Composition>(this.attach_Composition), new Action<Composition>(this.detach_Composition));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeArt", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodeArt
		{
			get
			{
				return this._CodeArt;
			}
			set
			{
				if ((this._CodeArt != value))
				{
					this.OnCodeArtChanging(value);
					this.SendPropertyChanging();
					this._CodeArt = value;
					this.SendPropertyChanged("CodeArt");
					this.OnCodeArtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Libele", DbType="VarChar(20)")]
		public string Libele
		{
			get
			{
				return this._Libele;
			}
			set
			{
				if ((this._Libele != value))
				{
					this.OnLibeleChanging(value);
					this.SendPropertyChanging();
					this._Libele = value;
					this.SendPropertyChanged("Libele");
					this.OnLibeleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pu", DbType="Float")]
		public System.Nullable<double> Pu
		{
			get
			{
				return this._Pu;
			}
			set
			{
				if ((this._Pu != value))
				{
					this.OnPuChanging(value);
					this.SendPropertyChanging();
					this._Pu = value;
					this.SendPropertyChanged("Pu");
					this.OnPuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Composition", Storage="_Composition", ThisKey="CodeArt", OtherKey="CodeArt")]
		public EntitySet<Composition> Composition
		{
			get
			{
				return this._Composition;
			}
			set
			{
				this._Composition.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Composition(Composition entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Composition(Composition entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Composition")]
	public partial class Composition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCmp;
		
		private int _Qte;
		
		private int _CodeCmd;
		
		private int _CodeArt;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Commande> _Commande;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCmpChanging(int value);
    partial void OnIdCmpChanged();
    partial void OnQteChanging(int value);
    partial void OnQteChanged();
    partial void OnCodeCmdChanging(int value);
    partial void OnCodeCmdChanged();
    partial void OnCodeArtChanging(int value);
    partial void OnCodeArtChanged();
    #endregion
		
		public Composition()
		{
			this._Article = default(EntityRef<Article>);
			this._Commande = default(EntityRef<Commande>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCmp", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdCmp
		{
			get
			{
				return this._IdCmp;
			}
			set
			{
				if ((this._IdCmp != value))
				{
					this.OnIdCmpChanging(value);
					this.SendPropertyChanging();
					this._IdCmp = value;
					this.SendPropertyChanged("IdCmp");
					this.OnIdCmpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qte", DbType="Int NOT NULL")]
		public int Qte
		{
			get
			{
				return this._Qte;
			}
			set
			{
				if ((this._Qte != value))
				{
					this.OnQteChanging(value);
					this.SendPropertyChanging();
					this._Qte = value;
					this.SendPropertyChanged("Qte");
					this.OnQteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeCmd", DbType="Int NOT NULL")]
		public int CodeCmd
		{
			get
			{
				return this._CodeCmd;
			}
			set
			{
				if ((this._CodeCmd != value))
				{
					if (this._Commande.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeCmdChanging(value);
					this.SendPropertyChanging();
					this._CodeCmd = value;
					this.SendPropertyChanged("CodeCmd");
					this.OnCodeCmdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeArt", DbType="Int NOT NULL")]
		public int CodeArt
		{
			get
			{
				return this._CodeArt;
			}
			set
			{
				if ((this._CodeArt != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodeArtChanging(value);
					this.SendPropertyChanging();
					this._CodeArt = value;
					this.SendPropertyChanged("CodeArt");
					this.OnCodeArtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Composition", Storage="_Article", ThisKey="CodeArt", OtherKey="CodeArt", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Composition.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Composition.Add(this);
						this._CodeArt = value.CodeArt;
					}
					else
					{
						this._CodeArt = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commande_Composition", Storage="_Commande", ThisKey="CodeCmd", OtherKey="CodeCmd", IsForeignKey=true)]
		public Commande Commande
		{
			get
			{
				return this._Commande.Entity;
			}
			set
			{
				Commande previousValue = this._Commande.Entity;
				if (((previousValue != value) 
							|| (this._Commande.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commande.Entity = null;
						previousValue.Composition.Remove(this);
					}
					this._Commande.Entity = value;
					if ((value != null))
					{
						value.Composition.Add(this);
						this._CodeCmd = value.CodeCmd;
					}
					else
					{
						this._CodeCmd = default(int);
					}
					this.SendPropertyChanged("Commande");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commande")]
	public partial class Commande : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodeCmd;
		
		private System.Nullable<System.DateTime> _DateCmd;
		
		private EntitySet<Composition> _Composition;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeCmdChanging(int value);
    partial void OnCodeCmdChanged();
    partial void OnDateCmdChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCmdChanged();
    #endregion
		
		public Commande()
		{
			this._Composition = new EntitySet<Composition>(new Action<Composition>(this.attach_Composition), new Action<Composition>(this.detach_Composition));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeCmd", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodeCmd
		{
			get
			{
				return this._CodeCmd;
			}
			set
			{
				if ((this._CodeCmd != value))
				{
					this.OnCodeCmdChanging(value);
					this.SendPropertyChanging();
					this._CodeCmd = value;
					this.SendPropertyChanged("CodeCmd");
					this.OnCodeCmdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCmd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCmd
		{
			get
			{
				return this._DateCmd;
			}
			set
			{
				if ((this._DateCmd != value))
				{
					this.OnDateCmdChanging(value);
					this.SendPropertyChanging();
					this._DateCmd = value;
					this.SendPropertyChanged("DateCmd");
					this.OnDateCmdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commande_Composition", Storage="_Composition", ThisKey="CodeCmd", OtherKey="CodeCmd")]
		public EntitySet<Composition> Composition
		{
			get
			{
				return this._Composition;
			}
			set
			{
				this._Composition.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Composition(Composition entity)
		{
			this.SendPropertyChanging();
			entity.Commande = this;
		}
		
		private void detach_Composition(Composition entity)
		{
			this.SendPropertyChanging();
			entity.Commande = null;
		}
	}
}
#pragma warning restore 1591
